// Maven compilation fails ü§∑‚Äç‚ôÄÔ∏è Lets run it using Gradle
plugins {
  id 'java'
  id 'me.champeau.jmh' version 'latest.release'
  id 'idea'
}

repositories {
  mavenLocal()
  mavenCentral {
    mavenContent { releasesOnly() }
  }
  maven { url 'https://jitpack.io' }
}

dependencies {
  jmh 'org.openjdk.jmh:jmh-core:1.+'
  jmh 'org.openjdk.jmh:jmh-generator-annprocess:1.+'
  jmhAnnotationProcessor 'org.openjdk.jmh:jmh-generator-annprocess:1.+'

  implementation 'org.openjdk.jmh:jmh-core:1.+'
  implementation 'org.openjdk.jmh:jmh-generator-annprocess:1.+'


  implementation "io.vertx:vertx-core:4.+"

  implementation "org.junit.jupiter:junit-jupiter:latest.release"
  implementation "org.junit.vintage:junit-vintage-engine:latest.release"
}

tasks.withType(JavaCompile).configureEach {
  options.encoding = 'UTF-8'
  options.compilerArgs.addAll(['-Xlint:all,-serial', '-parameters', '-g', '-Xmaxwarns', '999'])
  options.release.set(17)
  options.deprecation = true
  options.debug = true
}

test {
  useJUnitPlatform()
  enableAssertions = true
  maxHeapSize = "1G"

  jvmArgs += [
    '-XX:+EnableDynamicAgentLoading',
    '-XX:+UseParallelGC',
    '-XX:+HeapDumpOnOutOfMemoryError',
    '-XX:+UseCompressedOops',
    '-XX:-OmitStackTraceInFastThrow',
    '-Djava.net.preferIPv4Stack=true',
    '-Dfile.encoding=UTF-8',
    '-XX:+DoEscapeAnalysis',
    '-XX:CompileCommand=inline,java/lang/String.charAt',
    '--add-opens=java.base/jdk.internal.misc=ALL-UNNAMED',
    '--add-opens=java.base/sun.nio.ch=ALL-UNNAMED',
    '--add-opens=java.management/com.sun.jmx.mbeanserver=ALL-UNNAMED',
    '--add-opens=jdk.internal.jvmstat/sun.jvmstat.monitor=ALL-UNNAMED',
    '--add-opens=java.base/sun.reflect.generics.reflectiveObjects=ALL-UNNAMED',
    '--add-opens=jdk.management/com.sun.management.internal=ALL-UNNAMED',
    '--add-opens=java.base/java.io=ALL-UNNAMED',
    '--add-opens=java.base/java.nio=ALL-UNNAMED',
    '--add-opens=java.base/java.util=ALL-UNNAMED',
    '--add-opens=java.base/java.util.concurrent=ALL-UNNAMED',
    '--add-opens=java.base/java.util.concurrent.locks=ALL-UNNAMED',
    '--add-opens=java.base/java.util.concurrent.atomic=ALL-UNNAMED',
    '--add-opens=java.base/java.lang=ALL-UNNAMED',
    '--add-opens=java.base/java.lang.invoke=ALL-UNNAMED',
    '--add-opens=java.base/java.math=ALL-UNNAMED',
    '--add-opens=java.sql/java.sql=ALL-UNNAMED',
    '--add-opens=java.base/java.net=ALL-UNNAMED'
  ]

  systemProperty("slf4j.detectLoggerNameMismatch", "true")
  systemProperty("file.encoding", "UTF-8")
  systemProperty("user.timezone", "GMT")
  systemProperty("user.language", "en")

  for (entry in System.getProperties()){
    if (entry.key.toString().startsWith("&")){
      options { systemProperty(entry.key.toString().substring(1), entry.value) }
    }
  }
  workingDir project.projectDir // Set the working directory to the subproject directory e.g. fink-lab/common-utils
  systemProperty("user.dir", project.projectDir) // –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è –ø–µ—Ä–µ—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞ ^
  println "[INFO] Test JVM: ${getJavaVersion()} = ${getExecutable()==null ? org.gradle.internal.jvm.Jvm.current().getJavaExecutable().getAbsolutePath() : getExecutable()}"
  try { println "[INFO] Test JVM: ${javaLauncher.get().executablePath} = ${javaLauncher.get().metadata.getJvmVersion()}" } catch (Throwable ignore){}
  println "[INFO] ${project.name}.workingDir = $workingDir\n${"*".repeat(120)}"
}
