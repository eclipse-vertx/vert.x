/*
 * Copyright 2012 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply from: 'gradle/extra-tasks.gradle'

buildscript {
  repositories {
    flatDir {
      dir 'extralibs'
    }
    mavenLocal()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    mavenCentral()
  }
  dependencies {
    classpath 'com.eriwen:gradle-js-plugin:1.1'
  }
} 

apply plugin: 'js'

allprojects {
  apply plugin: 'eclipse'
  apply plugin: 'idea'

  configurations {
    platform
  }
}

subprojects {
  apply plugin: 'java'

  sourceCompatibility = '1.7'
  targetCompatibility = '1.7'

  defaultTasks = ['classes']
  group = rootProject.group

  repositories {
    mavenLocal()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    mavenCentral()
  }

  dependencies {
    testCompile "junit:junit:$junitVersion"
    testCompile "io.vertx:vertx-testframework:$testframeworkversion", {
      exclude group: "io.vertx"
      exclude group: "junit"
    }
    testCompile project(":vertx-platform")
  }

  javadoc {
    destinationDir = file("build/docs/java/api")
  }
}

task test(dependsOn: [subprojects.test]) {
  group = null
  description = null
}

task clean(type: Delete, dependsOn: [subprojects.clean]) {
  group = 'build'
  description 'Clean the parent and all of the vert.x subprojects'

  delete 'build'
  subprojects.each {
    delete 'build/deps'
  }
}

task assemble(type: Copy, dependsOn: [subprojects.assemble]) {
  group = 'vert.x'
  description 'Build the parent and all of the vert.x subprojects'

  destinationDir file("build/$rootProject.name-$version")
  outputs.dir destinationDir
  into('bin') {
    from file('src/dist/scripts')
    // fileMode 755
  }
  into('client') {
    from file('src/dist/client')
  }
  into('conf') {
    from file('vertx-platform/src/main/resources')
    filter(org.apache.tools.ant.filters.ReplaceTokens, tokens:[version: rootProject.version])
    exclude "**/META_INF/**"
  }
  into('examples') {
    from file("vertx-examples/src/main")
    exclude "**/vertx-dev*"
  }
  into('examples/java/eventbusbridge') {
    from file("src/dist/client/vertxbus.js")
  }
  into('examples/groovy/eventbusbridge') {
    from file("src/dist/client/vertxbus.js")
  }
  into('examples/javascript/eventbusbridge') {
    from file("src/dist/client/vertxbus.js")
  }
  into('examples/python/eventbusbridge') {
    from file("src/dist/client/vertxbus.js")
  }
  into('examples/ruby/eventbusbridge') {
    from file("src/dist/client/vertxbus.js")
  }
  into('examples/groovy/webapp/web/js') {
    from file("src/dist/client/vertxbus.js")
  }
  into('examples/javascript/webapp/web/js') {
    from file("src/dist/client/vertxbus.js")
  }
  into('examples/javascript/angularjs/web/js') {
    from file("src/dist/client/vertxbus.js")
  }
  into('examples/python/webapp/web/js') {
    from file("src/dist/client/vertxbus.js")
  }
  into('examples/ruby/webapp/web/js') {
    from file("src/dist/client/vertxbus.js")
  }
  into('lib') {
    from subprojects.configurations.compile    
    from subprojects.jar
    // Don't just include everything!!
    includes = ["jackson*.jar", "netty*.jar", "hazelcast*.jar", "vertx*.jar"]
  }
  doLast {
    project.ant.chmod(file: "build/$rootProject.name-$version/bin", perm: 'ugo+x')
  }
}

task minifyClient(type: com.eriwen.gradle.js.tasks.MinifyJsTask) {
  source = file("build/$rootProject.name-$version/client/vertxbus.js")
  dest = file("build/$rootProject.name-$version/client/vertxbus.min.js")
  closure {
    warningLevel = 'QUIET'
  }
}

task javadocs(type: Javadoc, dependsOn: subprojects.javadoc) {
  group = null       // hide the task
  description = null // hide the task

  source = subprojects.sourceSets.main.java
  classpath = files(subprojects.configurations.compile)

  excludes = ["**/impl/**"]
  includes = ["**/core/**", "**/platform/**"]

  destinationDir file("build/$rootProject.name-$version/api-docs/java/api")
  inputs.files classpath
  outputs.dir destinationDir
}

task createDocs(dependsOn: [subprojects.classes, 'javadocs']) {
  group = 'vert.x'
  description = 'Build all of the various docs for the project'
}

task distZip(type: Zip, dependsOn : ['assemble', 'minifyClient', 'createDocs']) {
  group = 'vert.x'
  description 'Create the Zip distribution'

  destinationDir file('build/distributions')
  baseName = rootProject.name
  version = rootProject.version
  from 'build'
  include "$rootProject.name-$version/**"
}

task distTar(type: Tar, dependsOn: ['assemble', 'minifyClient', 'createDocs']) {
  group = 'vert.x'
  description 'Create the GZIP distribution'

  compression = org.gradle.api.tasks.bundling.Compression.GZIP
  destinationDir file('build/distributions')
  inputs.files files("build/$rootProject.name-$version")
  outputs.dir destinationDir
  baseName = rootProject.name
  version = rootProject.version
  extension = 'tar.gz'
  from 'build'
  include "$rootProject.name-$version/**"
}

task dist(dependsOn: ['distTar', 'distZip']){
  group = 'vert.x'
  description 'Create distributions - tar.gz and zip'
}

task release(dependsOn: ['clean', 'test', 'dist']) {
  group = 'vert.x'
  description 'Clean and fully test the current version before creating the distribution'
}