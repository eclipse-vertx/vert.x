apply plugin: 'java'
apply plugin: 'groovy'

version = '1.0.beta1'

repositories {
    flatDir(dirs: file('lib/main'))
}

dependencies {
  compile fileTree('lib/main').matching {
    include '*.jar'
    exclude 'groovy-all-*.jar'
  }
  testCompile fileTree('lib/tests').matching { include '*.jar' }

  groovy module(':groovy-all:1.8.6')
}

sourceSets {
  test {
    java.srcDirs = [file('src/tests/java'), file('src/tests/testapps/java')]
    resources.srcDirs = [file('src/tests/java')]
  }
}

sourceCompatibility = "1.7"
targetCompatibility = "1.7"

jar {
  version = ''
}

test {
  useTestNG()
  include "**/*Test.class"
  exclude "**/redis/*.class"
  systemProperty "java.util.logging.config.file", "conf/logging.properties"
}

task rubyTests(type: Exec, dependsOn: testClasses) {
  group = 'verification'
  workingDir = file('src/tests/ruby')
  executable = file('src/tests/ruby/run_tests.sh')
}

task redisTests(type: Test, dependsOn: testClasses) {
    useTestNG()
    include("**/RedisTest.class")
}

task yardoc(type: Exec) {
    rubySrc = "src/main/ruby/core/**"
    vertxRbSrc = "src/main/ruby/vertx.rb"
    licenseSrc = "LICENSE.txt"
    readmeSrc = "README.md"
    destDir = "target/docs/ruby/api/"

    inputs.files licenseSrc, vertxRbSrc, readmeSrc
    inputs.dir rubySrc
    outputs.dir destDir

    commandLine = ["yardoc", "--title", "'vert.x Ruby API'", "--readme",
                   readmeSrc, "--no-private", "--output-dir", destDir,
                   vertxRbSrc, rubySrc, "-", licenseSrc]
}

distSpec = copySpec {
  into('lib/java') {
    from jar, configurations.compile
  }
  into('lib/ruby') {
    from 'src/main/ruby'
    include '**/*.rb'
  }
  into('lib/groovy') {
    from 'src/main/groovy'
    include '**/*.groovy'
  }
  into('conf') {
    from "conf/logging.properties", "conf/cluster.xml"
  }
  into('docs/java/api') {
    from javadoc
  }
  into('docs/groovy/api') {
    from groovydoc
  }
  into('docs/ruby/api') {
    from yardoc
  }
  into('bin') {
    from 'src/scripts/vertx'
    fileMode = 0755
  }
  into('examples') {
    from 'src/examples'
  }

  from 'LICENSE.txt', "README.md", "rel-notes/release-notes-${version}.txt"
}


task dist(type: Zip) {
  description = 'Builds the distribution.'
  group = 'build'
  into("$project.name-$version") {
    with distSpec
  }
}

task install(type: Sync) {
  with distSpec
  if (System.getenv()['VERTX_HOME']) {
    into System.getenv()['VERTX_HOME']
  }
  else {
    into System.getProperty('java.io.tmpdir') + '/vertx'
  }
}

task tarDist(type: Tar) {
  into("$project.name-$version") {
    with distSpec
  }
  compression = org.gradle.api.tasks.bundling.Compression.GZIP
}

task wrapper(type: Wrapper)

