/*
 * Copyright 2012 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

allprojects {
	configurations {
		compile
		platform {
			extendsFrom compile
		}
		examples {
			extendsFrom compile			
		}
	}
}

subprojects {
	apply plugin: 'java'
	apply plugin: 'eclipse'
	apply plugin: 'idea'

	sourceCompatibility = '1.7'
	targetCompatibility = '1.7'

	repositories {
		mavenCentral()
	}

	dependencies {
		testCompile "junit:junit:$junitVersion"
	}
}

ext.releaseDir = file("$rootProject.buildDir/releases/$rootProject.name-$version")

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// vert.x core tasks

def distSpec = copySpec {
	def release = "$rootProject.name-$version"

	into("$release") {
		from 'src', 'LICENSE.txt', "README.md"
	}

	into("$release/bin") {
		from project(":vertx-boot").jar
	}

	into("$release/examples") {
		from file('vertx-examples/src/main')
	}

// TODO find elegant method for including this
//	into("$release/docs/groovy/api") {
//		from subprojects.groovydoc
//	}

	into("$release/docs/java/api") {
		from subprojects.javadoc
	}

// TODO find elegant method for including this
//	into("$release/docs/javascript/api") {
//		from subprojects.rhinodoc
//	}

// TODO find elegant method for including this
//	into("$release/docs/ruby/api") {
//		from subprojects.yardoc
//	}

	// could do better...
	subprojects.findAll { p-> p.name.matches('vertx-core.*') }.each { proj->
		into("$release/lib") {
			from proj.jar, proj.configurations.compile
		}
	}

	project(':vertx-lang').subprojects.each { proj->
		into("$release/lib") {
			from proj.jar, proj.configurations.compile
		}
	}
	
	def moduleBuild = project(':vertx-mods').buildDir
	into("$release/mods") {
		from "$moduleBuild/mods"
	}
}

task clean(dependsOn: 'cleanRelease') {
	group = 'vert.x'
	description = 'Perform a full clean of the main project and subprojects'
}

task cleanRelease() {
	group = 'vert.x'
	description = 'Clean only the release directory'
	
	doLast {
		def releases = file("build/releases")
		if (releases.exists()) { 
			boolean deleted = releases.delete() 
			if (!deleted) {
				// TODO check why this doesn't clear the dir sometimes
				println "WARNING: directory '$releases' was not deleted"
			}
		}
	}
}

task prepareRelease(type: Sync, dependsOn: subprojects.assemble) {
	group = 'vert.x'
	description = 'Prepare the release directory'

	def releaseDir = mkdir("$buildDir/releases/$rootProject.name-$version")

	// enable caching of outputs
	inputs.files 'src'
	outputs.dir releaseDir

	into "$buildDir/releases"
	with distSpec

	doLast {
		['logs', 'temp'].each { dir->
			new File(releaseDir, dir).mkdirs()
		}
	}
}

task testRelease(dependsOn: subprojects.test) {
	group = 'vert.x'
	description = 'Test the release'
}

task dist(type: Tar, dependsOn: ['prepareRelease', 'testRelease']) {
	group = 'vert.x'
	description = 'Build the tarball distribution.'

	destinationDir = file('build/distributions')
	baseName = rootProject.name
	version = rootProject.version
	from 'build/releases'
	include "$rootProject.name-$version/**"

	compression = org.gradle.api.tasks.bundling.Compression.GZIP
	
	doLast {
		println "Distribution packaged: $destinationDir/$archiveName"
	}
}

task installApp(type: Sync, dependsOn: ['prepareRelease']) {
	group = 'vert.x'
	description = 'install a local version of this build'

	from 'build/releases'
	include "$rootProject.name-$version/**"

	if (System.getenv('VERTX_HOME')) {
	  into System.getenv('VERTX_HOME')
	}
	else {
	  into System.getProperty('java.io.tmpdir') + "/$rootProject.name-$version"
	}
}

task wrapper(type: Wrapper) {
	group = 'setup'
	description = 'Configures a Gradle wrapper'
	gradleVersion = "$gradleVersion"
}


