/*
 * Copyright 2012 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// apply plugin: 'application'
apply from: 'gradle/extra-tasks.gradle'

buildscript {
	repositories {
		// mavenLocal()
		maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
		mavenCentral()
	}
	dependencies {
		classpath "io.vertx:vertx-build-tools:0.1-SNAPSHOT"
	}
} 

allprojects {
	configurations {
		platform
	}
}

subprojects {
	apply plugin: 'eclipse'
	apply plugin: 'idea'
	apply plugin: 'java'
	
	sourceCompatibility = '1.7'
	targetCompatibility = '1.7'

	defaultTasks = ['classes']
	group = 'io.vertx'
	
	repositories {
		mavenCentral()
	}
	
	dependencies {
		testCompile "junit:junit:$junitVersion"
	}
	
	javadoc {
		destinationDir = file("build/docs/java/api")
	}
}

defaultTasks = ['preflight']

task preflight() {
	group = null
	description = null
	assert System.getenv("JRUBY_HOME") != null
	assert System.getenv("JYTHON_HOME") != null
	
	System.setProperty 'jruby.home', System.getenv("JRUBY_HOME")
	System.setProperty 'jython.home', System.getenv("JYTHON_HOME")
}

task clean(type: Delete, dependsOn: [subprojects.clean]) {
	group = 'build'
	description 'Clean the parent and all of the vert.x subprojects'

	delete 'build/release', 'build/distributions'
}

task assemble(type: Copy, dependsOn: ['preflight', subprojects.assemble]) {
	group = 'vert.x'
	description 'Build the parent and all of the vert.x subprojects'

	['mods', 'temp', 'logs'].each { dir->
		mkdir("$rootDir/build/release/$dir")
	}

	destinationDir file('build/release')
	outputs.dir destinationDir
	into('bin') {
		from project(':vertx-boot').jar
	}
	into('bin') {
		from file('src/dist/scripts')
		// fileMode 755
	}
	into('client') {
		from file('src/dist/client')
	}
	into('conf') {
		from file('src/dist/conf')
		filter(org.apache.tools.ant.filters.ReplaceTokens, tokens:[version: rootProject.version])
	}
	into('examples') {
		from file("vertx-examples/src/main")
		// from project(":vertx-examples").sourceSets.main
	}
	into('lib') {
		from subprojects.configurations.platform
		from subprojects.configurations.compile
	}
	doLast {
		project.ant.chmod(file: "build/release/bin", perm: 'ugo+x')
	}
}

task javadocs(type: Javadoc, dependsOn: subprojects.javadoc) {
	group = null       // hide the task
	description = null // hide the task

	source = subprojects.sourceSets.main.java
	classpath = files(subprojects.configurations.compile)

	destinationDir file("build/release/docs/java/api")
	inputs.files classpath
	outputs.dir destinationDir
}

task nonJavadocs(type: Copy) {
	group = null       // hide the task
	description = null // hide the task

	destinationDir file('build/release/docs')
	
	inputs.files subprojects.docsDir
	outputs.dir destinationDir
	
	doFirst {
		['groovy/api', 'javascript/api', 'python/api', 'ruby/api'].each { dir->
			mkdir("$rootDir/build/release/docs/$dir")
		}
	}
	
	// TODO make this less ugly
	into('groovy') {
		from file('vertx-lang/vertx-lang-groovy/build/docs/groovy')
	}
	into('python') {
		from file('vertx-lang/vertx-lang-jython/build/docs/python')
	}
	into('ruby') {
		from file('vertx-lang/vertx-lang-jruby/build/docs/ruby')
	}
	into('javascript') {
		from file('vertx-lang/vertx-lang-rhino/build/docs/javascript')
	}
}

task createDocs(dependsOn: ['assemble', 'javadocs', 'nonJavadocs']) {
	group = 'vert.x'
	description = 'Build all of the various docs for the project'
}

task installApp(type: Sync, dependsOn: ['assemble']) {
	group = 'vert.x'
	description 'Install a local copy of this build'

	def vertxTemp = file(System.getProperty('java.io.tmpdir') + "vertx-$version")
	destinationDir vertxTemp
	inputs.files files('build/release')
	outputs.dir destinationDir
	from 'build/release'
}

task createRelease(type: Tar, dependsOn: 'assemble') {
	group = 'vert.x'
	description 'Install a local copy of this build'
	
	compression = org.gradle.api.tasks.bundling.Compression.GZIP
	destinationDir file('build/distributions')
	inputs.files files('build/release')
	outputs.dir destinationDir
	baseName = rootProject.name
	version = rootProject.version
	from 'build/release'
}

/* 
 * TODO add Git tasks for tagging a release
 * TODO add Git tasks for publishing binaries to master
 * TODO add Git tasks for updating documentation on website
 * (@see EGit)
 * 
 */



